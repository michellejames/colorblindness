!function(){"use strict";function e(s){if(!s)throw new Error("No options passed to Waypoint constructor");if(!s.element)throw new Error("No element option passed to Waypoint constructor");if(!s.handler)throw new Error("No handler option passed to Waypoint constructor");this.key="waypoint-"+t,this.options=e.Adapter.extend({},e.defaults,s),this.element=this.options.element,this.adapter=new e.Adapter(this.element),this.callback=s.handler,this.axis=this.options.horizontal?"horizontal":"vertical",this.enabled=this.options.enabled,this.triggerPoint=null,this.group=e.Group.findOrCreate({name:this.options.group,axis:this.axis}),this.context=e.Context.findOrCreateByElement(this.options.context),e.offsetAliases[this.options.offset]&&(this.options.offset=e.offsetAliases[this.options.offset]),this.group.add(this),this.context.add(this),i[this.key]=this,t+=1}var t=0,i={};e.prototype.queueTrigger=function(e){this.group.queueTrigger(this,e)},e.prototype.trigger=function(e){this.enabled&&this.callback&&this.callback.apply(this,e)},e.prototype.destroy=function(){this.context.remove(this),this.group.remove(this),delete i[this.key]},e.prototype.disable=function(){return this.enabled=!1,this},e.prototype.enable=function(){return this.context.refresh(),this.enabled=!0,this},e.prototype.next=function(){return this.group.next(this)},e.prototype.previous=function(){return this.group.previous(this)},e.invokeAll=function(e){var t=[];for(var s in i)t.push(i[s]);for(var o=0,n=t.length;o<n;o++)t[o][e]()},e.destroyAll=function(){e.invokeAll("destroy")},e.disableAll=function(){e.invokeAll("disable")},e.enableAll=function(){e.Context.refreshAll();for(var t in i)i[t].enabled=!0;return this},e.refreshAll=function(){e.Context.refreshAll()},e.viewportHeight=function(){return window.innerHeight||document.documentElement.clientHeight},e.viewportWidth=function(){return document.documentElement.clientWidth},e.adapters=[],e.defaults={context:window,continuous:!0,enabled:!0,group:"default",horizontal:!1,offset:0},e.offsetAliases={"bottom-in-view":function(){return this.context.innerHeight()-this.adapter.outerHeight()},"right-in-view":function(){return this.context.innerWidth()-this.adapter.outerWidth()}},window.Waypoint=e}(),function(){"use strict";function e(e){window.setTimeout(e,1e3/60)}function t(e){this.element=e,this.Adapter=o.Adapter,this.adapter=new this.Adapter(e),this.key="waypoint-context-"+i,this.didScroll=!1,this.didResize=!1,this.oldScroll={x:this.adapter.scrollLeft(),y:this.adapter.scrollTop()},this.waypoints={vertical:{},horizontal:{}},e.waypointContextKey=this.key,s[e.waypointContextKey]=this,i+=1,o.windowContext||(o.windowContext=!0,o.windowContext=new t(window)),this.createThrottledScrollHandler(),this.createThrottledResizeHandler()}var i=0,s={},o=window.Waypoint,n=window.onload;t.prototype.add=function(e){var t=e.options.horizontal?"horizontal":"vertical";this.waypoints[t][e.key]=e,this.refresh()},t.prototype.checkEmpty=function(){var e=this.Adapter.isEmptyObject(this.waypoints.horizontal),t=this.Adapter.isEmptyObject(this.waypoints.vertical),i=this.element==this.element.window;e&&t&&!i&&(this.adapter.off(".waypoints"),delete s[this.key])},t.prototype.createThrottledResizeHandler=function(){function e(){t.handleResize(),t.didResize=!1}var t=this;this.adapter.on("resize.waypoints",function(){t.didResize||(t.didResize=!0,o.requestAnimationFrame(e))})},t.prototype.createThrottledScrollHandler=function(){function e(){t.handleScroll(),t.didScroll=!1}var t=this;this.adapter.on("scroll.waypoints",function(){t.didScroll&&!o.isTouch||(t.didScroll=!0,o.requestAnimationFrame(e))})},t.prototype.handleResize=function(){o.Context.refreshAll()},t.prototype.handleScroll=function(){var e={},t={horizontal:{newScroll:this.adapter.scrollLeft(),oldScroll:this.oldScroll.x,forward:"right",backward:"left"},vertical:{newScroll:this.adapter.scrollTop(),oldScroll:this.oldScroll.y,forward:"down",backward:"up"}};for(var i in t){var s=t[i],o=s.newScroll>s.oldScroll,n=o?s.forward:s.backward;for(var r in this.waypoints[i]){var a=this.waypoints[i][r];if(null!==a.triggerPoint){var l=s.oldScroll<a.triggerPoint,c=s.newScroll>=a.triggerPoint,g=l&&c,p=!l&&!c;(g||p)&&(a.queueTrigger(n),e[a.group.id]=a.group)}}}for(var d in e)e[d].flushTriggers();this.oldScroll={x:t.horizontal.newScroll,y:t.vertical.newScroll}},t.prototype.innerHeight=function(){return this.element==this.element.window?o.viewportHeight():this.adapter.innerHeight()},t.prototype.remove=function(e){delete this.waypoints[e.axis][e.key],this.checkEmpty()},t.prototype.innerWidth=function(){return this.element==this.element.window?o.viewportWidth():this.adapter.innerWidth()},t.prototype.destroy=function(){var e=[];for(var t in this.waypoints)for(var i in this.waypoints[t])e.push(this.waypoints[t][i]);for(var s=0,o=e.length;s<o;s++)e[s].destroy()},t.prototype.refresh=function(){var e,t=this.element==this.element.window,i=t?void 0:this.adapter.offset(),s={};this.handleScroll(),e={horizontal:{contextOffset:t?0:i.left,contextScroll:t?0:this.oldScroll.x,contextDimension:this.innerWidth(),oldScroll:this.oldScroll.x,forward:"right",backward:"left",offsetProp:"left"},vertical:{contextOffset:t?0:i.top,contextScroll:t?0:this.oldScroll.y,contextDimension:this.innerHeight(),oldScroll:this.oldScroll.y,forward:"down",backward:"up",offsetProp:"top"}};for(var n in e){var r=e[n];for(var a in this.waypoints[n]){var l,c,g,p,d,h=this.waypoints[n][a],u=h.options.offset,f=h.triggerPoint,m=0,w=null==f;h.element!==h.element.window&&(m=h.adapter.offset()[r.offsetProp]),"function"==typeof u?u=u.apply(h):"string"==typeof u&&(u=parseFloat(u),h.options.offset.indexOf("%")>-1&&(u=Math.ceil(r.contextDimension*u/100))),l=r.contextScroll-r.contextOffset,h.triggerPoint=Math.floor(m+l-u),c=f<r.oldScroll,g=h.triggerPoint>=r.oldScroll,p=c&&g,d=!c&&!g,!w&&p?(h.queueTrigger(r.backward),s[h.group.id]=h.group):!w&&d?(h.queueTrigger(r.forward),s[h.group.id]=h.group):w&&r.oldScroll>=h.triggerPoint&&(h.queueTrigger(r.forward),s[h.group.id]=h.group)}}return o.requestAnimationFrame(function(){for(var e in s)s[e].flushTriggers()}),this},t.findOrCreateByElement=function(e){return t.findByElement(e)||new t(e)},t.refreshAll=function(){for(var e in s)s[e].refresh()},t.findByElement=function(e){return s[e.waypointContextKey]},window.onload=function(){n&&n(),t.refreshAll()},o.requestAnimationFrame=function(t){(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||e).call(window,t)},o.Context=t}(),function(){"use strict";function e(e,t){return e.triggerPoint-t.triggerPoint}function t(e,t){return t.triggerPoint-e.triggerPoint}function i(e){this.name=e.name,this.axis=e.axis,this.id=this.name+"-"+this.axis,this.waypoints=[],this.clearTriggerQueues(),s[this.axis][this.name]=this}var s={vertical:{},horizontal:{}},o=window.Waypoint;i.prototype.add=function(e){this.waypoints.push(e)},i.prototype.clearTriggerQueues=function(){this.triggerQueues={up:[],down:[],left:[],right:[]}},i.prototype.flushTriggers=function(){for(var i in this.triggerQueues){var s=this.triggerQueues[i],o="up"===i||"left"===i;s.sort(o?t:e);for(var n=0,r=s.length;n<r;n+=1){var a=s[n];(a.options.continuous||n===s.length-1)&&a.trigger([i])}}this.clearTriggerQueues()},i.prototype.next=function(t){this.waypoints.sort(e);var i=o.Adapter.inArray(t,this.waypoints);return i===this.waypoints.length-1?null:this.waypoints[i+1]},i.prototype.previous=function(t){this.waypoints.sort(e);var i=o.Adapter.inArray(t,this.waypoints);return i?this.waypoints[i-1]:null},i.prototype.queueTrigger=function(e,t){this.triggerQueues[t].push(e)},i.prototype.remove=function(e){var t=o.Adapter.inArray(e,this.waypoints);t>-1&&this.waypoints.splice(t,1)},i.prototype.first=function(){return this.waypoints[0]},i.prototype.last=function(){return this.waypoints[this.waypoints.length-1]},i.findOrCreate=function(e){return s[e.axis][e.name]||new i(e)},o.Group=i}(),function(){"use strict";function e(e){this.$element=t(e)}var t=window.jQuery,i=window.Waypoint;t.each(["innerHeight","innerWidth","off","offset","on","outerHeight","outerWidth","scrollLeft","scrollTop"],function(t,i){e.prototype[i]=function(){var e=Array.prototype.slice.call(arguments);return this.$element[i].apply(this.$element,e)}}),t.each(["extend","inArray","isEmptyObject"],function(i,s){e[s]=t[s]}),i.adapters.push({name:"jquery",Adapter:e}),i.Adapter=e}(),function(){"use strict";function e(e){return function(){var i=[],s=arguments[0];return e.isFunction(arguments[0])&&(s=e.extend({},arguments[1]),s.handler=arguments[0]),this.each(function(){var o=e.extend({},s,{element:this});"string"==typeof o.context&&(o.context=e(this).closest(o.context)[0]),i.push(new t(o))}),i}}var t=window.Waypoint;window.jQuery&&(window.jQuery.fn.waypoint=e(window.jQuery)),window.Zepto&&(window.Zepto.fn.waypoint=e(window.Zepto))}(),console.log("Mic check, 1,2, 1,2"),$(function(){var e,t=["assets/img/HomePage/HeroGlasses.png","assets/img/HomePage/HeroGlassesDUE.png","assets/img/HomePage/HeroGlassesPRO.png","assets/img/HomePage/HeroGlassesTRI.png","assets/img/HomePage/DrawnEyePicture.png","assets/img/HomePage/ColorPalette.png","assets/img/HomePage/ColorPaletteDUE.png","assets/img/HomePage/ColorPalettePRO.png","assets/img/HomePage/ColorPaletteTRI.png","assets/img/HomePage/RainReflect.png","assets/img/HomePage/RainReflectDUE.png","assets/img/HomePage/RainReflectPRO.png","assets/img/HomePage/RainReflectTRI.png","assets/img/Footer/FooterImage.png","assets/img/Footer/FooterImageDUE.png","assets/img/Footer/FooterImagePRO.png","assets/img/Footer/FooterImageTRI.png","assets/img/HomePage/Hero2.png","assets/img/HomePage/Hero2DUE.png","assets/img/HomePage/Hero2PRO.png","assets/img/HomePage/Hero2TRI.png","assets/img/DesignPage/textoverimageNORMAL.png","assets/img/DesignPage/textoverimageDUE.png","assets/img/DesignPage/textoverimagePRO.png","assets/img/DesignPage/textoverimageTRI.png","assets/img/DesignPage/textwarningnewcolorDEU.png","assets/img/DesignPage/textwarningnewcolorPRO.png","assets/img/DesignPage/textwarningnewcolorTRI.png","assets/img/DesignPage/textwarningnewcolor2DEU.png","assets/img/DesignPage/textwarningnewcolor2PRO.png","assets/img/DesignPage/textwarningnewcolor2TRI.png","assets/img/DesignPage/Assets/Textwarning1.png","assets/img/DesignPage/Assets/Textwarning2.png","assets/img/DesignPage/Facebookblue.png","assets/img/DesignPage/FacebookblueDUE.png","assets/img/DesignPage/FacebookbluePRO.png","assets/img/DesignPage/FacebookblueTRI.png","assets/img/DesignPage/FacebookLoginScreen.png","assets/img/DesignPage/FacebookLoginScreenDUE.png","assets/img/DesignPage/FacebookLoginScreenPRO.png","assets/img/DesignPage/FacebookLoginScreenTRI.png","assets/img/ResourcesPage/ResourceHeaderNormal.png","assets/img/ResourcesPage/ResourceHeaderDEU.png","assets/img/ResourcesPage/ResourceHeaderPRO.png","assets/img/ResourcesPage/ResourceHeaderTRI.png","assets/img/ResourcesPage/AppsHelpfulTipsNormal.png","assets/img/ResourcesPage/AppsHelpfulTipsDEU.png","assets/img/ResourcesPage/AppsHelpfulTipsPRO.png","assets/img/ResourcesPage/AppsHelpfulTipsTRI.png","assets/img/ResourcesPage/BestPracticesNormal.png","assets/img/ResourcesPage/BestPracticesDEU.png","assets/img/ResourcesPage/BestPracticesPRO.png","assets/img/ResourcesPage/BestPracticesTRI.png","assets/img/ResourcesPage/colortestNormal.png","assets/img/ResourcesPage/colortestDEU.png","assets/img/ResourcesPage/colortestPRO.png","assets/img/ResourcesPage/colortestTRI.png","assets/img/ResourcesPage/DayInTheLifeNormal.png","assets/img/ResourcesPage/DayInTheLifeDEU.png","assets/img/ResourcesPage/DayInTheLifePRO.png","assets/img/ResourcesPage/DayInTheLifeTRI.png"],i=document.createElement("div");i.className="preload-holder",document.body.appendChild(i);for(var s=0;s<t.length;s++)e=new Image,e.src=t[s],i.appendChild(e);$(".slider__dot, .slider__dot2, .details__circle").click(function(e){e.preventDefault()}),$(".slider__dotNORMAL, .details__circleNORMAL").click(function(){$("body").removeClass(),$(".slider__dotDUE, .slider__dotPRO, .slider__dotTRI").removeClass("active"),$(".details__circleDUE, .details__circlePRO, .details__circleTRI").removeClass("active"),$(this).fadeIn("slow").addClass("normal, active"),$(".slider__paragraph, .slider__paragraph2").text("normal vision")}),$(".slider__dotDUE, .details__circleDUE").click(function(){$(".slider__dotNORMAL, .slider__dotPRO, .slider__dotTRI").removeClass("active"),$(".details__circleNORMAL, .details__circlePRO, .details__circleTRI").removeClass("active"),$("body").removeClass(),$("body").fadeIn("slow").addClass("due"),$(this).addClass("active"),$(".slider__paragraph, .slider__paragraph2").text("deuteronopia vision")}),$(".slider__dotPRO, .details__circlePRO").click(function(){$(".slider__dotNORMAL, .slider__dotDUE, .slider__dotTRI").removeClass("active"),$(".details__circleNORMAL, .details__circleDUE, .details__circleTRI").removeClass("active"),$("body").removeClass(),$("body").fadeIn("slow").addClass("pro"),$(this).addClass("active"),$(".slider__paragraph, .slider__paragraph2").text("protanopia vision")}),$(".slider__dotTRI, .details__circleTRI").click(function(){$(".slider__dotNORMAL, .slider__dotPRO, .slider__dotDUE").removeClass("active"),$(".details__circleNORMAL, .details__circlePRO, .details__circleDUE").removeClass("active"),$("body").removeClass(),$("body").fadeIn("slow").addClass("tri"),$(this).addClass("active"),$(".slider__paragraph, .slider__paragraph2").text("tritanopia vision")}),$(".hamburger").click(function(e){e.preventDefault(),TweenMax.fromTo(".mobilenav",.5,{left:"-40%"},{left:"0%"})}),$(".hamburgerOut").click(function(e){e.preventDefault(),TweenMax.fromTo(".mobilenav",.5,{left:"0%"},{left:"-40%"})});$("#stickynav").waypoint(function(e){"up"===e?($(".stickynav").removeClass("fixed"),$(".stickynav-replacement").removeClass("show")):($(".stickynav").addClass("fixed"),$(".stickynav-replacement").addClass("show"))},{offset:"0%"})}),$(".fourPointFive").waypoint(function(){TweenMax.to(".fourPointFive__text_large",1.5,{left:"50%",opacity:"1"})},{offset:"60%"});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
